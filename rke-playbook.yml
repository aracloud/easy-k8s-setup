---
- hosts: all
  become: true
  tasks:

    - name: Configure netplan second nic
      blockinfile:
        path: /etc/netplan/01-netcfg.yaml
        block: |2
              eth1:
                dhcp4: false
                dhcp6: false
                optional: true
                addresses: [{{ node_ip2 }}/24]
                gateway4: {{ gateway_ip }}

    - name: Apply netplan again
      command: netplan apply

    - name: Disable ufw firewall
      command: ufw disable

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - net-tools

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce=5:19.03.15~3-0~ubuntu-bionic
        - docker-ce-cli=5:19.03.15~3-0~ubuntu-bionic
        - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Add an apt signing key for Helm
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        state: present

    - name: Add apt repository for Helm
      apt_repository:
        repo: deb https://baltocdn.com/helm/stable/debian/ all main
        state: present
        filename: helm-stable-debian.list

    - name: Install Helm binary
      apt: 
        name: helm
        state: present
        update_cache: yes

    - name: RKE | Download binary from Github
      get_url:
        url: "https://github.com/rancher/rke/releases/download/{{ rke_version }}/rke_linux-amd64"
        dest: "{{ rke_install_dir }}/rke_{{ rke_version }}"
        owner: "root"
        group: "root"
        mode: 0755

    - name: Create directory .ssh
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: Create file authorized_keys
      file:
        path: "~/.ssh/authorized_keys"
        state: touch
        mode: 0600

    - name: Generate ssh id_rsa key material
      openssh_keypair:
        path: ~/.ssh/id_rsa

    - name: sneaky way to get the keys right
      shell: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

    - name: RKE Create a symlink to the binary
      file:
        src: "{{ rke_install_dir }}/rke_{{ rke_version }}"
        dest: "{{ rke_install_dir }}/rke"
        state: link

    - name: Copy the rke cluster config to server location
      copy: src={{ rke_cluster_config }} dest=~/{{ rke_cluster_config }}

    - name: "RUN rke up"
      command: "{{ rke_install_dir }}/rke up --config ~/{{ rke_cluster_config }}"
      register: rke_up_result
      changed_when: false

    # - name: "rke up Result"
    #   debug:
    #     msg: "{{ rke_up_result.stdout }}"
    #   when: rke_up_result is not skipped

    - name: Create directory .kube
      file:
        path: ~/.kube
        state: directory

    - name: Create file kube config
      file:
        path: "~/.kube/config"
        state: touch
        mode: 0600

    - name: Copy kube config
      shell: cat ~/{{ rke_cluster_kube_config }} > ~/.kube/config
    
    - name: Create namespace for Rancher Control Plane
      community.kubernetes.k8s:
        name: cattle-system
        api_version: v1
        kind: Namespace
        state: present

    - name: Create namespace for cert-manager
      community.kubernetes.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: present

    - name: Apply cert manager CRD's
      shell: kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/{{ rke_cert_mgr_version }}/cert-manager.crds.yaml

    - name: Add the Jetstack Helm repository
      shell: helm repo add jetstack https://charts.jetstack.io

    - name: Update your local Helm chart repository cache
      shell: helm repo update

    # - name: Install the cert-manager Helm chart
    #   shell: helm install \
    #           cert-manager jetstack/cert-manager \
    #           --namespace cert-manager \
    #           --version {{ rke_cert_mgr_version }}


    - name: Install the cert-manager Helm chart
      community.kubernetes.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager


  handlers:
    - name: docker status
      service: name=docker state=started
